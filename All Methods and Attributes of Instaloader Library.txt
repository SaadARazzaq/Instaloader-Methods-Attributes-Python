üëâHere are all the methods and attributes of the Instaloader class in the Instaloader library, as described in the documentation:

------------------------------------------------------------------------------------------------------------------------------------------
üî•Methods:
------------------------------------------------------------------------------------------------------------------------------------------

‚úÖ__init__(self, **kwargs): Initializes a new Instaloader instance.

‚úÖcontext(self): Returns the context of the Instaloader instance.

‚úÖsave_session_to_file(self, filename): Saves the session state to a file.

‚úÖload_session_from_file(self, filename): Loads the session state from a file.

‚úÖlogin(self, user, passwd): Logs in to Instagram using the provided username and password.

‚úÖlogout(self): Logs out of Instagram.

‚úÖget_hashtag_posts(self, hashtag): Returns a generator of all posts with a given hashtag.

‚úÖget_profile_posts(self, profile): Returns a generator of all posts of a given profile.

‚úÖdownload_profile(self, profile, **kwargs): Downloads all posts, metadata and optionally profile picture and stories of a given profile.

‚úÖdownload_hashtag(self, hashtag, **kwargs): Downloads all posts and metadata of a given hashtag.

‚úÖdownload_post(self, post, **kwargs): Downloads a post and its metadata.

‚úÖdownload_comments(self, post, **kwargs): Downloads the comments of a given post.

‚úÖdownload_geotags(self, geotag, **kwargs): Downloads all posts and metadata for a given geotag.

‚úÖdownload_stories(self, userids, **kwargs): Downloads all stories of the given userids.

‚úÖdownload_feed(self, **kwargs): Downloads all posts from the logged-in user's feed.

‚úÖdownload_tagged(self, profile, **kwargs): Downloads all posts in which the given profile is tagged.

------------------------------------------------------------------------------------------------------------------------------------------
üî•Attributes:
------------------------------------------------------------------------------------------------------------------------------------------

‚û°Ô∏ècontext: The context of the Instaloader instance.

‚û°Ô∏ècontext.username: The username of the logged-in user.

‚û°Ô∏ècontext.password: The password of the logged-in user.

‚û°Ô∏ècontext.session_file: The path to the session file used by the Instaloader instance.

‚û°Ô∏ècontext.session_file_mtime: The modification time of the session file.

‚û°Ô∏ècontext.is_logged_in: Whether the Instaloader instance is currently logged in or not.

‚û°Ô∏ècontext.query_cookies: The cookies used for query requests.

‚û°Ô∏ècontext.edge_web_cookies: The cookies used for Edge Web requests.

‚û°Ô∏ècontext.fbns_cookies: The cookies used for Fbns requests.

‚û°Ô∏ècontext.username_id: The user ID of the logged-in user.

‚û°Ô∏ècontext.user_agent: The user agent used for HTTP requests.

‚û°Ô∏ècontext.custom_query_headers: Custom headers for query requests.

‚û°Ô∏ècontext.custom_edge_web_headers: Custom headers for Edge Web requests.

‚û°Ô∏ècontext.custom_fbns_headers: Custom headers for Fbns requests.

‚û°Ô∏ècontext.rate_controller: The rate controller used for HTTP requests.

‚û°Ô∏ècontext.request_timeout: The timeout for HTTP requests.

‚û°Ô∏ècontext.proxy_handler: The proxy handler used for HTTP requests.

‚û°Ô∏ècontext.queries_queue: The queue of pending GraphQL queries.

‚û°Ô∏ècontext.queries_queue_lock: The lock for the queries_queue attribute.

‚û°Ô∏ècontext.debug_http: Whether HTTP requests should be printed to the console for debugging purposes.

‚û°Ô∏ècontext.debug_requests: Whether requests to the Instagram servers should be printed to the console for debugging purposes.

‚û°Ô∏ècontext.sleep_multiplier: The sleep multiplier used by the rate controller.

‚û°Ô∏ècontext.nightly_build: Whether the instance should use the latest nightly build of Instaloader.

‚û°Ô∏ècontext.verbosity: The verbosity level of the Instaloader instance.

‚û°Ô∏ècontext.logger: The logger used by the Instaloader instance.

‚û°Ô∏èsave_session(): Save the current session cookie to the cookie jar file.

‚û°Ô∏èload_session(): Load a session cookie from the cookie jar file.

‚û°Ô∏ècontext.get_session_id(): Get the session ID of the current session cookie.

‚û°Ô∏ècontext.get_session_file(): Get the file name of the session cookie jar.

‚û°Ô∏ècontext.check_session() (deprecated): Check whether the session cookie is still valid.

‚û°Ô∏ècontext.logout(): Log out the currently logged-in user.

‚û°Ô∏ècontext.is_logged_in: Whether a user is currently logged in.

‚û°Ô∏ècontext.interactive_login(): Log in the user interactively.

‚û°Ô∏ècontext.authenticated_request() (deprecated): Perform an authenticated HTTP request.

‚û°Ô∏ècontext.graphql_query() (deprecated): Perform a GraphQL query.

‚û°Ô∏ècontext.check_ratelimit() (deprecated): Check whether the rate limit has been reached.

‚û°Ô∏ècontext.sleep() (deprecated): Sleep for a given amount of time, taking into account the rate controller.

‚û°Ô∏ècontext.exception_sleep() (deprecated): Sleep for a given amount of time when an exception has occurred, taking into account the rate 
controller.

‚û°Ô∏ècontext.test_login(): Test whether the provided login credentials are valid.

‚û°Ô∏ècontext.get_user(user: str): Get an instance of the Profile class representing a user.

‚û°Ô∏ècontext.download_profile(): Download a user's profile data to disk.

‚û°Ô∏ècontext.download_profiles(): Download profile data for multiple users to disk.

‚û°Ô∏ècontext.download_stories(): Download stories for one or more users.

‚û°Ô∏ècontext.download_feed(): Download a user's feed.

‚û°Ô∏ècontext.download_hashtag(): Download posts for a given hashtag.

‚û°Ô∏ècontext.download_hashtag_feed(): Download a hashtag feed.

‚û°Ô∏ècontext.download_comments(): Download comments for one or more posts.

‚û°Ô∏ècontext.download_geotags(): Download posts for one or more geotags.

‚û°Ô∏ècontext.download_geotag_feed(): Download a geotag feed.

‚û°Ô∏ècontext.download_tagged(): Download posts in which a user is tagged.

‚û°Ô∏ècontext.download_tagged_feed(): Download a tagged feed.

‚û°Ô∏ècontext.download_igtv(): Download IGTV videos.

‚û°Ô∏ècontext.download_highlights(): Download highlights.

‚û°Ô∏ècontext.download_followers(): Download followers of a user.

‚û°Ô∏ècontext.download_followees(): Download users a user is following.

‚û°Ô∏ècontext.download_similar_accounts(): Download similar accounts.

‚û°Ô∏ècontext.download_saved_posts(): Download saved posts.

‚û°Ô∏ècontext.download_tagged_posts() (deprecated): Download posts in which a user is tagged.

‚û°Ô∏ècontext.download_user_stories() (deprecated): Download stories for a user.

‚û°Ô∏ècontext.download_stories_of_followees() (deprecated): Download stories for users a user is following.

‚û°Ô∏ècontext.save_session_to_file(filename: str): Save the current session to a file.

‚û°Ô∏ècontext.load_session_from_file(filename: str): Load a session from a file.

‚û°Ô∏ècontext.context_sleep(delay: float): Sleep for a given amount of time, while allowing the Instaloader instance to be stopped by a keyboard interrupt.

‚û°Ô∏ècontext.checkpoint_reached(): Returns True if the current time is beyond the checkpoint set by context.checkpoint_resume() method.

‚û°Ô∏ècontext.checkpoint_resume(): Sets the checkpoint time for the next iteration of a download job.

‚û°Ô∏ècontext.stop() (deprecated): Stop the current download process.

‚û°Ô∏ècontext.log() (deprecated): Print a log message with a given severity level.

‚û°Ô∏ècontext.flush() (deprecated): Flush the log messages.

‚û°Ô∏ècontext.banner() (deprecated): Print a banner message.

‚û°Ô∏ècontext.close() (deprecated): Close the Instaloader instance and terminate any ongoing download jobs.

‚û°Ô∏ècontext.interactive_login(): Prompt the user to log in interactively.

‚û°Ô∏ècontext.test_connection() (deprecated): Test whether a connection can be established to Instagram servers.

‚û°Ô∏ècontext.set_max_connection_attempts(max_connection_attempts: int): Set the maximum number of attempts to establish a connection to 
Instagram servers.

‚û°Ô∏ècontext.set_retry_metadata_login(retry_metadata_login: bool): Set whether metadata login should be retried if it fails.

‚û°Ô∏ècontext.set_metadata_stories_enabled(metadata_stories_enabled: bool): Set whether metadata stories should be downloaded.

‚û°Ô∏ècontext.set_user_metadata_enabled(user_metadata_enabled: bool): Set whether user metadata should be downloaded.

‚û°Ô∏ècontext.set_comments_enabled(comments_enabled: bool): Set whether comments should be downloaded.

‚û°Ô∏èdownload_profile(profile: Union[str, Profile], *args, **kwargs): Download all media of a given profile.

‚û°Ô∏èdownload_hashtag(hashtag: Union[str, Hashtag], *args, **kwargs): Download all media of a given hashtag.

‚û°Ô∏èdownload_tagged(username: Union[str, Profile], *args, **kwargs): Download all media in which a given profile was tagged.

‚û°Ô∏èdownload_feed_posts(*args, **kwargs): Download all new posts from the current user's feed.

‚û°Ô∏èdownload_saved_posts(*args, **kwargs): Download all saved posts of the current user.

‚û°Ô∏èdownload_igtv(*args, **kwargs): Download all IGTV videos of the current user.

‚û°Ô∏èdownload_highlights(*args, **kwargs): Download all highlights of the current user.

‚û°Ô∏èdownload_stories(*args, **kwargs): Download all stories of the current user.

‚û°Ô∏èdownload_comments(post: Union[str, Post], *args, **kwargs): Download all comments of a given post.

‚û°Ô∏èdownload_geotags(*args, **kwargs): Download all geotags.

‚û°Ô∏èsave_metadata(profile: Union[str, Profile], *args, **kwargs): Save metadata for a given profile to a file.

‚û°Ô∏èload_metadata(profile: Union[str, Profile], *args, **kwargs): Load metadata for a given profile from a file.

‚û°Ô∏èdownload_all(*args, **kwargs): Download everything from the current user's account.

‚û°Ô∏èdownload_multiple_profiles(*args, **kwargs): Download media from multiple profiles.

‚û°Ô∏èget_profile_by_username(username: str) -> Profile: Get a Profile object for a given username.

‚û°Ô∏èget_hashtag_by_name(hashtag: str) -> Hashtag: Get a Hashtag object for a given hashtag.

‚û°Ô∏èget_post_by_shortcode(shortcode: str) -> Post: Get a Post object for a given shortcode.

‚û°Ô∏ècontext.is_logged_in: Returns True if currently logged in to an Instagram account.

‚û°Ô∏ècontext.session_file: Path to the file where the session is saved.

‚û°Ô∏ècontext.username: Username of the currently logged in Instagram account.

‚û°Ô∏ècontext.password: Password of the currently logged in Instagram account.

‚û°Ô∏ècontext.rate_controller: Controls the rate at which the Instaloader instance accesses Instagram servers.

‚û°Ô∏ècontext.query_rate_limiter: Manages query rate limiting.

‚û°Ô∏ècontext.fileurl_to_path(url: str) -> Optional[str]: Returns the file path for a given URL if it is already downloaded, otherwise returns None.

‚û°Ô∏ècontext.load_session_from_file(sessionfilename: str): Loads a saved session from a file.

‚û°Ô∏ècontext.save_session_to_file(sessionfilename: str): Saves the current session to a file.

‚û°Ô∏ècontext.user_agent: User agent string that is sent with requests to Instagram.

‚û°Ô∏ècontext.storyitem_url_metadata_cache: Cache for story item URLs that have been checked for metadata.

‚û°Ô∏ècontext.logger: Logger used for logging messages in Instaloader.

‚û°Ô∏ècontext.update_session(): Update the session by logging in again and discarding all cached information.

‚û°Ô∏ècontext.logfilename: Path to the file where the logger writes messages to.

‚û°Ô∏ècontext.informative_action: Optional callable that will be called with an informative action string when an informative action happens.

‚û°Ô∏ècontext.error_action: Optional callable that will be called with an error message string when an error happens.

‚û°Ô∏ècontext.quiet: If set to True, suppresses console output.

‚û°Ô∏èget_comments(post: Union[str, Post]) -> List[Comment]: Get a list of comments for a given post.

‚û°Ô∏èget_likes(post: Union[str, Post]) -> List[Profile]: Get a list of profiles that have liked a given post.

‚û°Ô∏èget_posts_from_profiles(profiles: Iterable[Union[str, Profile]]) -> Generator[Post, None, None]: Get a generator of posts from multiple 
profiles.

‚û°Ô∏èget_saved_posts() -> List[Post]: Get a list of saved posts for the currently logged in user.

‚û°Ô∏èget_stories(userids: Optional[List[int]] = None, exclude_stories_from_friends: bool = False, max_count: Optional[int] = None) -> 
List[Story]: Get a list of stories for the currently logged in user or for a given list of user IDs.

‚û°Ô∏èget_user_id_from_username(username: str) -> Optional[int]: Get the user ID for a given username.


